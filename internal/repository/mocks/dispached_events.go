// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dispached_events.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/vitorbgouveia/go-event-processor/internal/repository"
)

// MockDispatchedEvents is a mock of DispatchedEvents interface.
type MockDispatchedEvents struct {
	ctrl     *gomock.Controller
	recorder *MockDispatchedEventsMockRecorder
}

// MockDispatchedEventsMockRecorder is the mock recorder for MockDispatchedEvents.
type MockDispatchedEventsMockRecorder struct {
	mock *MockDispatchedEvents
}

// NewMockDispatchedEvents creates a new mock instance.
func NewMockDispatchedEvents(ctrl *gomock.Controller) *MockDispatchedEvents {
	mock := &MockDispatchedEvents{ctrl: ctrl}
	mock.recorder = &MockDispatchedEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatchedEvents) EXPECT() *MockDispatchedEventsMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDispatchedEvents) Insert(event repository.EventInsertInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDispatchedEventsMockRecorder) Insert(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDispatchedEvents)(nil).Insert), event)
}
